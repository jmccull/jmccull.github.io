[{"name": "app.py", "content": "from shiny import Inputs, Outputs, Session, App, reactive, render, req, ui\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport io\n\n#follow web app design from https://towardsdev.com/develop-a-web-app-in-10min-and-deploy-it-for-free-3c636b2732c7\n\n#read in the data to visualize (start with redshift distributions)\n\ndef format_cell_props(unqcells,prop,shape):\n    #formats the cell properties into an array the shape of the som\n    output = np.ones(shape[0] * shape[1]) * np.NaN\n    for i, c in enumerate(unqcells):\n        output[c] = prop[i]\n\n    return np.reshape(output, shape)\n\nsom = {i:np.random.rand(10) for i in np.arange(150*75)} #np.load('zdictfile.npy')\nmedians = np.array([np.median(som[i]) for i in som.keys()])\nmedians = format_cell_props(som.keys(),medians,(150,75))\nwvlength = np.linspace(10,10000,num=300)\nspectra = np.random.rand(150*75,300)#np.load('spectrafile.npy')\ncellids = np.arange(150*75).reshape((150,75)).astype(int)\n\n\n#user interface\napp_ui = ui.page_fluid(\n    ui.panel_title('DESI-KiDS-VIKING Redshift Distributions'),  # 1\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"column\", \"cell column\", min=0, max=74, value=30, width='100%'),  # 2\n            ui.input_slider(\"row\", \"cell row\", min=0, max=149, value=30, width='100%'),  # 3\n            ui.download_button(\"downloadData\", \"Download Current Figure\"),\n            ui.download_button(\"downloadall\", \"Download All Data\"),\n\nwidth=4, height='60px'),\n        ui.panel_main(\n            ui.output_plot(\"p\",height='650px'),  # 4\n        width=12)\n    ))\n\n#server function backend\ndef server(input: Inputs, output: Outputs, session: Session):\n    # 1\n    @reactive.Calc\n    def get_som_data():\n        cellid = cellids[int(input.row()), int(input.column())]\n\n        zdist = som[cellid]\n        specz = spectra[cellid, :]\n        return cellid, zdist, specz\n\n    # 2\n    @output\n    @render.plot\n    def p():\n        fig,ax = plt.subplot_mosaic('ABB;ACC')\n        #fig.set_size_inches((10,10))\n        cellid, zdist, specz = get_som_data()\n\n        g = ax['A'].imshow(medians, cmap='nipy_spectral',origin='lower',interpolation='nearest')\n        ax['A'].xaxis.set_ticklabels([])\n        ax['A'].yaxis.set_ticklabels([])\n        ax['A'].axvline(x=input.column(), linestyle='dashed',linewidth=3,color='black')\n        ax['A'].axhline(y=input.row(), linestyle='dashed', linewidth=3, color='black')\n        plt.colorbar(g, ax=ax['A'], shrink=0.75).set_label(label=r'Median $z$',size=20)\n\n        ax['B'].hist(zdist, bins=150, range=(0, 2),label=None)\n        ax['B'].axvline(x=medians.flatten()[cellid],linestyle='dashed',color='gray',label='median: {0:.3f}'.format(medians.flatten()[cellid]))\n        ax['B'].legend(loc='upper right',fontsize=14)\n        ax['B'].set_xlabel(r'$z$',fontsize=14)\n        ax['B'].set_ylabel(r'$p(z|$cell$)$',fontsize=14)\n\n        ax['C'].plot(wvlength,specz,'o-',color='blue')\n        ax['C'].set_xlabel(r'Rest frame $\\lambda$',fontsize=14)\n        ax['C'].set_ylabel('Mean Redrock Fit',fontsize=14)\n\n        return fig\n\n    @session.download(filename='figure.png')\n    def downloadData():\n        \"\"\"\n        This is the simplest case returninig bytes, duplicates the plotting function to save\n        \"\"\"\n        fig, ax = plt.subplot_mosaic('ABB;ACC')\n        fig.set_size_inches((22,10))\n        # fig.set_size_inches((10,10))\n        cellid, zdist, specz = get_som_data()\n\n        g = ax['A'].imshow(medians, cmap='nipy_spectral', origin='lower', interpolation='nearest')\n        ax['A'].xaxis.set_ticklabels([])\n        ax['A'].yaxis.set_ticklabels([])\n        ax['A'].axvline(x=input.column(), linestyle='dashed', linewidth=3, color='black')\n        ax['A'].axhline(y=input.row(), linestyle='dashed', linewidth=3, color='black')\n        plt.colorbar(g, ax=ax['A']).set_label(label=r'Median $z$', size=18)\n\n        ax['B'].hist(zdist, bins=150, range=(0, 2), label=None)\n        ax['B'].axvline(x=medians.flatten()[cellid], linestyle='dashed', color='gray',\n                        label='median: {0:.3f}'.format(medians.flatten()[cellid]))\n        ax['B'].legend(loc='upper right', fontsize=18)\n        ax['B'].set_xlabel(r'$z$', fontsize=18)\n        ax['B'].set_ylabel(r'$p(z|$cell$)$', fontsize=18)\n\n        ax['C'].plot(wvlength, specz, 'o-', color='blue')\n        ax['C'].set_xlabel(r'Rest frame $\\lambda$', fontsize=18)\n        ax['C'].set_ylabel('Mean Redrock Fit', fontsize=18)\n        plt.tight_layout()\n\n        with io.BytesIO() as buf:\n            plt.savefig(buf, dpi=300,format=\"png\")\n            yield buf.getvalue()\n\n\n    @session.download()\n    def downloadAll():\n        \"\"\"\n        This should return the full data set as a collection of bytes\n        \"\"\"\n\n        path = ('../4c3r2_messenger_selection.png') #placeholder\n        return path\n\napp = App(app_ui, server)", "type": "text"}]